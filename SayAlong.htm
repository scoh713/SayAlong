<!DOCTYPE html>
<html>

<head>

<style type='text/css'>
.filebox label {
	display: inline-block; 
	padding: .1em .5em; 
	color: #ffffff;
	border-radius: 10px;
	font-size: 16px;
	font-weight: bold;
	vertical-align: middle; 
	background-color: #4682B4;
	cursor: pointer;  }
.filebox input[type="file"] { 
	position: absolute; 
	width: 0px;
	overflow: hidden; 
	border: 0; }
</style>

</head>

<body>
<table>
    <tr> <td colspan=4>
        <table>
	<td>
                    <div class="filebox">
		<label for="fileVideo"> Video </label>
		<input type="file" id="fileVideo" accept=".mp4" />
                    </div>
	</td>
            <td width="50%"> <div id="fn_video" /> </td>
	<td style="width:5px"/>
	<td>
                    <div class="filebox">
		<label for="fileSub"> Subtitle </label>
		<input type="file" id="fileSub" accept=".srt" />
                    </div>
	</td>
	<td width="50%"> <div id="fn_subtitle" /> </td>
        </table>
    </td> </tr>

    <tr>
	<td colspan=4> <video id="myVideo" width="100%" controls autobuffer/> </td>
    </tr>
    <tr>
	<td width="30%" align="left"> <div id="sub_pos" style="height:20px"/> </td>
	<td width="30%" align="right"> Speed <input type="range" id="playSpeed" min="0.5" max="1.25" step="0.25" value="1"> </td>
	<td width="10%" align="left"> <div id="speedLabel"> 1 </div> </td>
	<td width="30%" align="right"> <input type="button" id="refreshSub" value="Refresh" style="overflow:auto"></td>
    </tr>
    <tr>
	<td colspan=4> <div id="mySubtitle" style="height:200px; table-layout:fixed; overflow-y:scroll; border:thin double #000"/> </td>
    </tr>
</table>
</body>

<script type ="text/javascript">

var	fileVideo, fileSub, refreshSub, playSpeed, speedLabel, leftButton, rightButton;
var	video, subtitle;
var	fn_video, fn_subtitle;
var	cur_pos, last_pos, pos_end;
var	play_part = false;	// if true, play a part of video
var	parts = new Array();

window.onload = function () {
	fileVideo = document.getElementById('fileVideo');
	fileVideo.addEventListener('change', loadVideo, false);
	fileSub = document.getElementById("fileSub");
	fileSub.addEventListener('change', loadSub, false);
	refreshSub = document.getElementById("refreshSub");
	refreshSub.addEventListener('click', reloadSub, false);
	playSpeed = document.getElementById("playSpeed");
	playSpeed.addEventListener('change', changeSpeed, false);
	speedLabel = document.getElementById("speedLabel");
	video = document.getElementById("myVideo");
	video.addEventListener('timeupdate', checkTime, false);
	video.addEventListener('mousewheel', scrollVideo, false);
	video.addEventListener('click', checkPart, false);
	subtitle = document.getElementById('mySubtitle');
	document.addEventListener('keydown', hotKey, false);
	fn_video = document.getElementById("fn_video");
	fn_subtitle = document.getElementById("fn_subtitle");
	cur_pos = 0;
}

function	Position (left, right, label) { this.start = left; this.end = right; this.label = label}

function	doPlayPart (pos) {	// start play at pos_start
	if (cur_pos != pos) {
		cur_pos = pos;
		document.getElementById('sub_pos').innerHTML = 
			"Position: " + cur_pos + " (" + parts[cur_pos].label + ")" + " / " + last_pos;
	}
	video.currentTime = parts[cur_pos].start/1000.0;
	pos_end = parts[cur_pos].end/1000.0;
	video.play();
	play_part = true;
	video.addEventListener('timeupdate', checkTime, false);
}

function	checkTime () {	// end play at pos_end
	//document.getElementById('label').innerHTML = parseInt(video.currentTime);
	if (video.currentTime >= pos_end && play_part) {
		video.pause();
		play_part = false;
	}
}

function	scrollVideo (e) {
	if (e.wheelDelta > 0)
		video.currentTime += 1.0;
	else
		video.currentTime -= 1.0;
}

function	checkPart () {	// check the index of subtitle
	time_msec = Math.floor(video.currentTime * 1000);
	document.getElementById('sub_pos').innerHTML = " ";

	// binary search for current position of subtitle
	mid = left = 0; right = parts.length-1;
	while (left < right) {
		mid = Math.floor((left + right) / 2);
		if (time_msec < parts[mid].start) right = mid-1;
		else if (parts[mid+1].start <= time_msec) left = mid+1;
		else break;
	}
	cur_pos = mid;
	document.getElementById('sub_pos').innerHTML = 
		"Position: " + cur_pos + " (" + parts[cur_pos].label + ")" + " / " + last_pos;
}

function	hotKey (e) {
	var	speed = playSpeed.valueAsNumber;

	if (e.keyCode == 90)		// previous: '<-' 37, 'z' 90
		{ if (1 < cur_pos)  doPlayPart(cur_pos-1); }
	else if (e.keyCode == 88)		// current: 'PgDn' 40, 'x' 88
		doPlayPart(cur_pos);
	else if (e.keyCode == 67)		// next: '->' 39, 'c' 67
		{ if (cur_pos < last_pos) doPlayPart(cur_pos+1); }
	else if (e.keyCode == 189)		// slower: '-'
		{ if (speed >= 0.75) speed -= 0.25; setSpeed(speed); }
	else if (e.keyCode == 187)		// faster: '='
		{ if (speed <= 1) speed += 0.25; setSpeed(speed); }

// Ref: https://www.python2.net/questions-994925.htm
}

function	loadVideo (e) {
	video.src = fileVideo.files[0].name;
	strs = video.src.split('/');
	str = decodeURI(strs[strs.length-1]); 
	fn_video.innerHTML = str;
}

function	loadSub (e) {
	var	reader = new FileReader();
	var	tmp = fileSub.files[0].name.split('.');
	var	ext = tmp[tmp.length-1].toLowerCase();

	strs = fileSub.files[0].name.split('/');
	str = decodeURI(strs[strs.length-1]); 
	fn_subtitle.innerHTML = str;

	if (ext == "srt") reader.onload = function(e) { getSrtSub(reader.result); }
	//else if (ext == "json") reader.onload = function(e) { getJsonSub(reader.result); }
	reader.readAsText(fileSub.files[0]);
//alert("loadSub: "+document.location.pathname);

// Ref: https://pks2974.medium.com/file-api-%EC%A0%95%EB%A6%AC%ED%95%98%EA%B8%B0-729fa6a3a0ba
// Ref: https://pythonq.com/so/javascript/1911538
}

function	reloadSub (e) { loadSub(e); }

function	changeSpeed (e) { setSpeed(playSpeed.valueAsNumber); }

function	setSpeed (speed) {
	video.playbackRate = speed;
	speedLabel.innerHTML = "" + speed;
	playSpeed.value = speed;
}

/*
function	getJsonSub (text) {
	var	json = JSON.parse(text);
	var	str = "";
	for (var pos = 0; pos < json.list.length; pos++) {
		str = str + pos+"\t<a onclick=\"doPlayPart("+pos+");\">"+json.list[pos].text+"</a><br>";
		parts[pos] = new Position(json.list[pos].start, json.list[pos].end);
	}
	subtitle.innerHTML = str;
}
*/

function	getSrtSub (text) {
	function	strip (s) { return s.replace(/^\s+|\s+$/g,""); }
	function	mSec (str) {
		var str1 = strip(str).split(':');
		var str2 = str1[2].split(',');
		//var msg = str + " -> " + str1[0] + ", " + str1[1] + ", " + str2[0] + ", "  + str2[1];
		//alert(msg);
		return ((parseInt(str1[0])*60+parseInt(str1[1]))*60+parseInt(str2[0]))*1000+parseInt(str2[1]);
	}

	var	srt = strip(text.replace(/\r\n|\r|\n/g, '\n')).split('\n\n');
	var	tags = "";
	
	var cnt = 1
	for (s in srt) {
		srt[s] = srt[s].replace('\n\n','')
//alert(srt[s])
		st = srt[s].split('\n');

		// filtering out null lines
		i = 0;
		for (j in st) if (st[j]) st[i++] = st[j];
		no_lines = i;
//alert("st[0] = " + st[0] + "\nno_lines = " + no_lines + "\nst[2] = " + st[2])

		// append current item to the list of subtitles
		if (no_lines >=2) {	// st = [num, time_range, text]
			last_pos = n = cnt++;
			if (no_lines == 2) str = "...";
			else str = st[2];  // preventing the trouble from null text
			var	tmp1 = st[1].split(' --> ');
			parts[n] = new Position(mSec(tmp1[0]), mSec(tmp1[1]), st[0]);
			if (no_lines > 2)
				for (j = 3; j < no_lines; j++) str += ' '+st[j];
			tags = tags + st[0] + " :" + "\t<a onclick=\"doPlayPart("+n+");\">"+str+"</a><br>";
		}
	}
	subtitle.innerHTML = tags;
}

</script>
</html>
